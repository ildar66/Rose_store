/**
* This file was generated by IBM WebSphere Studio Version 3.5
* C:\WDT400\Studio35\BIN\GenerationStyleSheets\V3.5\JSP1.1\ServletModel\DatabaseBean.xsl stylesheet was used to generate this file.
*
* Description - InsertIClient1DBBean
*/ 
package com.overstar.bank.iclient;
// Imports

import com.ibm.db.*;
import com.ibm.webtools.runtime.*;
import java.io.*;
import java.math.*;


// Imports for App Server V3 connection pooling
import javax.sql.DataSource;
import com.ibm.ejs.dbm.jdbcext.*;
import javax.naming.*;
import com.ibm.ejs.ns.jndi.*;
import java.sql.*;
import java.util.*;


// Imports for App Server V3.5 connection pooling
import com.ibm.websphere.advanced.cm.factory.*;



/**  */
 
public class InsertIClient1DBBean extends java.lang.Object 
{


  /** 
  * Instance variable for driver property
  */
  protected java.lang.String driver= "com.ibm.as400.access.AS400JDBCDriver";


  /** 
  * Instance variable for name property
  */
  protected java.lang.String name = null;


  /** 
  * Instance variable for number affected rows property
  */
  protected int numAffectedRows = 0;


  /** 
  * Instance variable for partyID property
  */
  protected java.lang.String partyID = null;


  /** 
  * Instance variable for pass property
  */
  protected java.lang.String pass = null;


  /** 
  * Instance variable for password property
  */
  protected java.lang.String password= "hwodn39fh5";


  /** 
  * Instance variable for SQL statement property
  */
  protected java.lang.String SQLString = "INSERT INTO    IBANK.ICLIENTS    (       PARTYID,       NAME,       PASSWORD    )     VALUES    (        ? ,        ? ,        ?     )";
   

  /** 
  * Instance variable for URL property
  */
  protected java.lang.String URL= "jdbc:as400://dev400.as.net";


  /** 
  * Instance variable for userID property
  */
  protected java.lang.String userID= "ildar";


  /**
  * Variable for the SQLStatement
  */
  protected SQLStatement sqlStatement;
  
  
  /**
  * Variable for the SelectResult - the SQL result set
  */
  protected SelectResult result;
  
  /**
  * Variable to hold the database connection bean
  */
  protected DatabaseConnection connBean = null;
  
  
  /**
  * Variable to hold DataSource
  */
  protected DataSource ds = null;

  /**
  * Variable to hold connection
  */
  protected Connection connection = null;

  /**
  * Variable to hold the data source name from .servlet file
  */
  protected String dataSourceName = "";
  


  /*****************************************************************************
  * Get method for the driver property
  * @return the value of the driver property
  
  */
  public java.lang.String getDriver(){
	return driver;
  }  
  /*****************************************************************************
  * Set method for the driver property
  * @param value the new value for the driver property
  
  */
  public void setDriver(java.lang.String value){
	this.driver = value;
  }  
  /*****************************************************************************
  * Get method for the name property
  * @return the value of the name property
  
  */
  public java.lang.String getName(){
	return name;
  }  
  /*****************************************************************************
  * Set method for the name property
  * @param value the new value for the name property
  
  */
  public void setName(java.lang.String value){
	this.name = value;
  }  
  /*****************************************************************************
  * Get method for the number affected rows property
  * @return the value of the number affected rows property
  
  */
  public int getNumAffectedRows(){
	return numAffectedRows;
  }  
  /*****************************************************************************
  * Get method for the partyID property
  * @return the value of the partyID property
  
  */
  public java.lang.String getPartyID(){
	return partyID;
  }  
  /*****************************************************************************
  * Set method for the partyID property
  * @param value the new value for the partyID property
  
  */
  public void setPartyID(java.lang.String value){
	this.partyID = value;
  }  
  /*****************************************************************************
  * Get method for the pass property
  * @return the value of the pass property
  
  */
  public java.lang.String getPass(){
	return pass;
  }  
  /*****************************************************************************
  * Set method for the pass property
  * @param value the new value for the pass property
  
  */
  public void setPass(java.lang.String value){
	this.pass = value;
  }  
  /*****************************************************************************
  * Set method for the password property
  * @param value the new value for the password property
  
  */
  public void setPassword(java.lang.String value){
	this.password = value;
  }  
  /*****************************************************************************
  * Get method for the SQL statement property
  * @return the value of the SQL statement property
  
  */
  public java.lang.String getSQLString(){
	return SQLString;
  }  
  /*****************************************************************************
  * Get method for the URL property
  * @return the value of the URL property
  
  */
  public java.lang.String getURL(){
	return URL;
  }  
  /*****************************************************************************
  * Set method for the URL property
  * @param value the new value for the URL property
  
  */
  public void setURL(java.lang.String value){
	this.URL = value;
  }  
  /*****************************************************************************
  * Get method for the userID property
  * @return the value of the userID property
  
  */
  public java.lang.String getUserID(){
	return userID;
  }  
  /*****************************************************************************
  * Set method for the userID property
  * @param value the new value for the userID property
  
  */
  public void setUserID(java.lang.String value){
	this.userID = value;
  }  

  /*****************************************************************************
  * Get method for the App Server V3 dataSourceName property
  */
  public String getDataSourceName()
  {
	return dataSourceName;
  }  

  /*****************************************************************************
  * Set method for the App Server V3 dataSourceName property
  */
  public void setDataSourceName(String value)
  {
	this.dataSourceName = value;
  }  


  /*****************************************************************************
  * execute action method   * @exception com.ibm.db.DataException
  * @exception java.io.IOException
  * @exception java.lang.Exception

  */
  public void execute()  
   throws com.ibm.db.DataException, java.io.IOException, java.lang.Exception, SQLException, ClassNotFoundException
  {  
	
	initialize();

	// Initialize the parameters for the query
	sqlStatement.setParameter("name", getName());
	sqlStatement.setParameter("partyID", new Integer(getPartyID()));
	sqlStatement.setParameter("pass", getPass());
	

	// Execute the SQL statement
	sqlStatement.execute();
	numAffectedRows = sqlStatement.getNumAffectedRows();

  }  

  /*****************************************************************************
  * Initializes the App Server V3 data acess beans
  * 
  * @exception com.ibm.db.DataException when a database access exception occurs
  * @exception java.io.IOException when an IO error occurs
  */
  protected void initialize() throws DataException, IOException, SQLException, ClassNotFoundException

  {
	StatementMetaData metaData = null;
  
	// Instantiate the connection bean and initialize it
	Class.forName(getDriver());
	connection = DriverManager.getConnection(getURL(), getUserID(), password);
	connBean = new DatabaseConnection(connection);
	

	if (connBean == null)
	{
	  return ;
	}

	// The statement must reference the connection to be used
		sqlStatement = new SQLStatement();
	sqlStatement.setConnection(connBean);

	// Add the SQL string to the metaData
	metaData = sqlStatement.getMetaData();
	metaData.setSQL(getSQLString());

	// Each table the query uses is added to the metadata. Then each column that
	// is returned from the select gets added to the metadata.
	metaData.addTable("IBANK.ICLIENTS");


	// Create placeholders for the parameters
	metaData.addParameter("partyID", Integer.class, 4);
	metaData.addParameter("name", String.class, 1);
	metaData.addParameter("pass", String.class, 1);
	
	return;
  }  
   
   
  
  /*****************************************************************************
  * Utility method to get the value at a specific row and column index
  * 
  * @param column the column containing the desired data
  * @param row the row containing the desired data
  * @return the value of the column at the specified row
  * @exception java.lang.ArrayIndexOutOfBoundsException thrown when there is no data at the specified row
  */
  private Object valueAtColumnRow(int column, int row) throws ArrayIndexOutOfBoundsException
  {
	// Index is 0 based but rows are 1 based, so increment the index
	int realRow = row + 1;

	// Handle an empty result set by throwing an exception
	if (result == null)
	{
	  throw new ArrayIndexOutOfBoundsException ("Result set is empty.");
	}

	// Handle an out of bounds index by throwing an exception
	if (realRow > result.getNumRowsInCache())
	{
	  throw new ArrayIndexOutOfBoundsException ("Row is out of bounds.");
	}

	// Adjust the current row to the desired row index
	try 
	{
	  result.setCurrentRow(realRow);
	}
	catch (Exception e)
	{
	  System.out.println("Error occurred in com.ibm.db.SelectResult.setCurrentRow");
	  e.printStackTrace();
	}

	// Return the indexed property element
	try 
	{
	  return result.getColumnValue(column);
	}

	catch (Exception e)
	{
	  System.out.println("Error occurred in com.ibm.db.SelectResult.getColumnValue");
	  e.printStackTrace();
	}
	return null;
  }  
  
  
  /*****************************************************************************
  * Close the result set and release resources
  */
  public void closeResultSet()
  {
	// Release the SQL statement resources
	try 
	{
	  if (result != null)
	  {
		result.close();
		result = null;
	  }
	}
	catch (Exception e)
	{
	  System.out.println("Error occurred in com.ibm.db.SelectResult.close");
	  e.printStackTrace();
	}
	try
	{
	  // Close the App Server V3 connection
	  if (connection != null)
		connection.close();
	}
	catch (Exception e)
	{
	  System.out.println("Error occurred in java.sql.Connection.close");
	  e.printStackTrace();
	}
	return ;
  }   
  
	
  
  /*****************************************************************************
  * Release resources we might be holding when garbage collection occurs.
  */
  protected void finalize() throws Throwable
  {
	closeResultSet();
  }  
   
}